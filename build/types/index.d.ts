import "core-js/stable";
import "regenerator-runtime/runtime";
export default class StreamStudioClient {
    private url;
    private externalId;
    private isVideoMuted;
    private isAudioMuted;
    private element?;
    private audioInputDevice;
    private videoInputDevice;
    private peerConnection?;
    private eventListenerList;
    private webSocketUrl;
    private hls?;
    private lastQualityChange;
    private currentQuality;
    private webSocket;
    private qualitySwitchInterval?;
    private qualities;
    constructor(url: string, externalId: string);
    connect(): void;
    fireEvent(data: {}): void;
    addEventListener(callback: Function): void;
    removeEventListener(callback: Function): void;
    getVideoInputDevices(): Promise<unknown>;
    getAudioInputDevices(): Promise<unknown>;
    getStats(): void;
    join(roomId: string, externalId: string): void;
    stop(): void;
    unJoin(): void;
    setPreviewElement(element: HTMLVideoElement): void;
    getDeviceStream(): Promise<MediaStream>;
    startPreview(stream: MediaStream): void;
    testSwitchQuality(): void;
    startPublishing(roomId: string): void;
    setVideoParams(sender: RTCRtpSender, height: number, bitrate: number): Promise<void>;
    unmuteVideo(): void;
    muteVideo(): void;
    unmuteAudio(): void;
    muteAudio(): void;
    stopPublishing(): void;
    closePeerConnection(): void;
    stopPreview(): void;
    switchVideoDevice(device: any): void;
    switchAudioDevice(device: any): void;
    askPermissions(): Promise<void>;
    getDevices(type: any): Promise<unknown>;
}
